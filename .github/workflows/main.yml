name: Financial Agent Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Set up PostgreSQL service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'financial_data' }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres123' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install PostgreSQL client for pg_isready command
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      
      - name: Run application
        env:
          API_KEY_ALPHAVANTAGE: ${{ secrets.API_KEY_ALPHAVANTAGE }}
          API_KEY_FINANCIALMODELINGPREP: ${{ secrets.API_KEY_FINANCIALMODELINGPREP }}
          API_KEY_NEWS: ${{ secrets.API_KEY_NEWS }}
          API_KEY_POLYGON: ${{ secrets.API_KEY_POLYGON }}
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ secrets.POSTGRES_DB || 'financial_data' }}
          DB_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres123' }}
        run: |
          echo "Testing application with PostgreSQL database..."
          cd src && python -c "
          import sys
          from config.settings import API_KEYS, DATABASE_CONFIG
          print('✓ Application configuration loaded successfully')
          print('✓ Database connection configured')
          print('✓ API keys configuration loaded')
          "

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create production .env file
      run: |
        echo "DB_HOST=postgres" > .env
        echo "DB_PORT=5432" >> .env
        echo "DB_NAME=${{ secrets.POSTGRES_DB || 'financial_data' }}" >> .env
        echo "DB_USER=${{ secrets.POSTGRES_USER || 'postgres' }}" >> .env
        echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD || 'postgres123' }}" >> .env
        echo "API_KEY_ALPHAVANTAGE=${{ secrets.API_KEY_ALPHAVANTAGE }}" >> .env
        echo "API_KEY_FINANCIALMODELINGPREP=${{ secrets.API_KEY_FINANCIALMODELINGPREP }}" >> .env
        echo "API_KEY_NEWS=${{ secrets.API_KEY_NEWS }}" >> .env
        echo "API_KEY_POLYGON=${{ secrets.API_KEY_POLYGON }}" >> .env

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and deploy with Docker Compose
      run: |
        docker-compose build
        docker-compose up -d
        
    - name: Wait for services to start
      run: |
        echo "Waiting for services to be ready..."
        sleep 30
        
    - name: Check service status
      run: |
        docker-compose ps
        echo "Deployment completed successfully!"
